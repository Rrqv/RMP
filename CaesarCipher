import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.Scanner;

public class CaesarCipher {
    private static final String ALPHABET = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.println("режим (1: шифрование, 2: расшифровка): ");
        int mode = scanner.nextInt();
        scanner.nextLine(); // consume newline

        System.out.println("введите путь к файлу: ");
        String inputFilePath = scanner.nextLine();

        System.out.println("введите путь к выходному файлу: ");
        String outputFilePath = scanner.nextLine();

        System.out.println("введите ключ: ");
        int key = scanner.nextInt();

        if (!Files.exists(Paths.get(inputFilePath))) {
            System.out.println("файл не существует.");
            return;
        }

        try {
            // Чтение файла с использованием UTF-8
            String text = new String(Files.readAllBytes(Paths.get(inputFilePath)), StandardCharsets.UTF_8);
            String result;

            if (mode == 1) {
                result = encrypt(text, key);
            } else if (mode == 2) {
                result = decrypt(text, key);
            } else {
                System.out.println("неверный режим");
                return;
            }

            // Запись результата в файл с использованием UTF-8
            Files.write(Paths.get(outputFilePath), result.getBytes(StandardCharsets.UTF_8));
            System.out.println("успешно");

        } catch (IOException e) {
            System.out.println("ошибка при обработке файла: " + e.getMessage());
        }
    }

    private static String encrypt(String text, int key) {
        StringBuilder encrypted = new StringBuilder();
        for (char c : text.toUpperCase().toCharArray()) {
            if (Character.isLetter(c)) {
                int originalIndex = ALPHABET.indexOf(c);
                int newIndex = (originalIndex + key) % ALPHABET.length();
                encrypted.append(ALPHABET.charAt(newIndex));
            } else {
                encrypted.append(c); // non-alphabetic characters are unchanged
            }
        }
        return encrypted.toString();
    }

    private static String decrypt(String text, int key) {
        return encrypt(text, ALPHABET.length() - key); // Decrypting is the same as encrypting with the negative key
    }
}
